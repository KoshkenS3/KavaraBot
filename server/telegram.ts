import express from 'express';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

export function setupTelegramBot() {
  console.log("Telegram bot setup completed");
}

export async function setupTelegramBotWithApp(app: express.Application) {
  // Webhook endpoint for Telegram
  app.post('/webhook', express.json(), async (req, res) => {
    try {
      const update = req.body;
      
      if (update.message) {
        await handleMessage(update.message);
      } else if (update.callback_query) {
        await handleCallbackQuery(update.callback_query);
      }
      
      res.status(200).send('OK');
    } catch (error) {
      console.error('Webhook error:', error);
      res.status(500).send('Error');
    }
  });

  // Setup bot commands and menu
  app.post('/setup-bot', async (req, res) => {
    try {
      // Set bot commands
      await setMyCommands();
      
      // Set menu button (Mini App)
      await setMenuButton();
      
      res.json({ success: true, message: 'Bot setup completed' });
    } catch (error) {
      console.error('Setup error:', error);
      res.status(500).json({ error: 'Setup failed' });
    }
  });

  // Get Mini App URL
  app.get('/mini-app-url', (req, res) => {
    const baseUrl = process.env.REPLIT_DEV_DOMAIN 
      ? `https://${process.env.REPLIT_DEV_DOMAIN}`
      : `http://localhost:5000`;
    
    res.json({ 
      miniAppUrl: baseUrl,
      telegramUrl: `https://t.me/${getBotUsername()}/start`
    });
  });
}

async function handleMessage(message: any) {
  const chatId = message.chat.id;
  const text = message.text;

  if (text === '/start') {
    const welcomeMessage = `
üéΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KAVARA! 

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã. –ì–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!

üéØ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ü—Ä–æ–≤–æ–∂—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é –≥–æ—Ç–æ–≤—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –±–æ–∫—Å—ã
‚Ä¢ –°–æ–∑–¥–∞—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è
    `;

    const keyboard = {
      inline_keyboard: [
        [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app: { url: getWebAppUrl() } }],
        [
          { text: "üìã –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data: "quiz" },
          { text: "üì¶ –ì–æ—Ç–æ–≤—ã–µ –±–æ–∫—Å—ã", callback_data: "ready_boxes" }
        ],
        [
          { text: "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data: "support" },
          { text: "‚ÑπÔ∏è –û –Ω–∞—Å", callback_data: "about" }
        ]
      ]
    };

    await sendMessage(chatId, welcomeMessage, keyboard);
  }
}

async function handleCallbackQuery(callbackQuery: any) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  let responseText = '';
  let keyboard: any = null;

  switch (data) {
    case 'quiz':
      responseText = 'üéØ –ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞!';
      keyboard = {
        inline_keyboard: [
          [{ text: "üìã –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", web_app: { url: `${getWebAppUrl()}/quiz` } }]
        ]
      };
      break;

    case 'ready_boxes':
      responseText = 'üì¶ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ –≥–æ—Ç–æ–≤—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –±–æ–∫—Å—ã!';
      keyboard = {
        inline_keyboard: [
          [{ text: "üõçÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å –±–æ–∫—Å—ã", web_app: { url: `${getWebAppUrl()}/ready-boxes` } }]
        ]
      };
      break;

    case 'support':
      responseText = 'üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ KAVARA –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!';
      keyboard = {
        inline_keyboard: [
          [{ text: "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", web_app: { url: `${getWebAppUrl()}/support` } }]
        ]
      };
      break;

    case 'about':
      responseText = `
‚ÑπÔ∏è –û KAVARA

KAVARA - —ç—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã –≤ Telegram. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é –æ–¥–µ–∂–¥—É –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è:

üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —Ü–µ–ª–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–¥–±–∏—Ä–∞–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∏ –±—é–¥–∂–µ—Ç—É

üì¶ –£–¥–æ–±–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–æ–∫—Å—ã
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞

üíù –ö–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∏–ª—å
‚Ä¢ –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      `;
      keyboard = {
        inline_keyboard: [
          [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app: { url: getWebAppUrl() } }]
        ]
      };
      break;
  }

  await sendMessage(chatId, responseText, keyboard);
  await answerCallbackQuery(callbackQuery.id);
}

async function setMyCommands() {
  const commands = [
    { command: 'start', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
    { command: 'app', description: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' },
    { command: 'quiz', description: '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å—Ç–∏–ª—è' },
    { command: 'boxes', description: '–ì–æ—Ç–æ–≤—ã–µ –±–æ–∫—Å—ã' },
    { command: 'orders', description: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' },
    { command: 'support', description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' }
  ];

  const response = await fetch(`${TELEGRAM_API_URL}/setMyCommands`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ commands })
  });

  return response.json();
}

async function setMenuButton() {
  const menuButton = {
    type: 'web_app',
    text: '–û—Ç–∫—Ä—ã—Ç—å KAVARA',
    web_app: { url: getWebAppUrl() }
  };

  const response = await fetch(`${TELEGRAM_API_URL}/setChatMenuButton`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ menu_button: menuButton })
  });

  return response.json();
}

async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const payload: any = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };

  if (replyMarkup) {
    payload.reply_markup = replyMarkup;
  }

  const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });

  return response.json();
}

async function answerCallbackQuery(callbackQueryId: string) {
  const response = await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ callback_query_id: callbackQueryId })
  });

  return response.json();
}

function getWebAppUrl(): string {
  return process.env.REPLIT_DEV_DOMAIN 
    ? `https://${process.env.REPLIT_DEV_DOMAIN}`
    : `http://localhost:5000`;
}

function getBotUsername(): string {
  // Extract username from bot token if needed
  // For now, return placeholder - will be updated when we get bot info
  return 'kavara_style_bot';
}

// Get bot info to retrieve username
export async function getBotInfo() {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/getMe`);
    const data = await response.json();
    return data.result;
  } catch (error) {
    console.error('Failed to get bot info:', error);
    return null;
  }
}